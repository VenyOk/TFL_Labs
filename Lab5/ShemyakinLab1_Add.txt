Что такое PFA?
________________________________________________________________
Вероятностный конечный автомат (probabilistic finite automaton, PFA) - это пятерка B = (Σ, Q, q_0, δ, F), со следующим значением компонентов:
1. Σ - алфавит
2. Q - конечное множество состояний
3. q_0 ⊆ Q - начальное состояние
4. Функция переходов δ: Q × Σ -> [0, 1]^Q, где [0, 1]^Q - это множество стохастических функций f из Q в [0, 1], для которых верно, что
сумма f(q) для всех q ∈ Q = 1. Эта функция дает вероятность перехода в каждое состояние. Находясь в состоянии q ∈ Q и читая символ
a ∈ Σ, автомат переходит во всякое состояние r с вероятностью δ(q, a)(r).
5. Множество принимающих состояний F ⊆ Q
Вычисление на входной строке w = a_1...a_l - это всякая последовательность состояний p_0, p_1,...,p_l. p_0 (по a_1)-> p_1 (по a_2)-> ... (по a_l)-> p_l.
Такое вычисление называется вычислением из p_0 в p_l. Вероятность вычисления - это произведение δ(p_{i-1}, a_i)(p_i), i ∈ {1, 2,..., n}.
Вероятность прийти из p в q, прочитав строку w - это сумма вероятностей всех таких вычислений. Вероятность принять из данного
состояния p - это сумма вероятностей прийти из p во все принимающие состояния. Вероятность принять строку - это вероятность принять ее из начального состояния.
================================================================
Условие ограниченной ошибки для PFA.
________________________________________________________________
Пусть B - PFA. Всякая строка принимается или с вероятностью хотя бы 2/3 или с вероятностью не более, чем 1/3. Если строка прнимается
с вероятностью хотя бы 2/3, то считается, что она принимается, а если с вероятностью 1/3 или менее - то что отвергается. Язык, распознаваемый
автоматом, обозначаемый через L(B) - это множество всех входных строк, которые принимаются с вероятностью более чем 1/2 (что равносильно
тому, что она принимается с вероятностью хотя бы 2/3)
================================================================
Теорема Рабина о PFA
________________________________________________________________
Всякий PFA распознает регулярный язык
================================================================
Что такое конфигурация машины Тьюринга?
________________________________________________________________
M - машина Тьюринга. Пусть Ω = Г ∪ Q ∪ {#, $} - алфавит, используемый для представления историй вычисления. Когда M, находясь
в состоянии q ∈ Q, видит символ a Г, и на ленте слева от головки лежит строка u ∈ Г*, а справа - строка v ∈ Г* 
(не считая пробелов, которые еще не посещались), то такая конфигурация обозначается строкой uqav Г*QГ^+. Для всякой входной
строки w ∈ Σ*, конфигурация машины Тьюринга после i шагов вычисления обозначается так: C_i = C_i(M, w) = uqav.
================================================================
Что такое история вычисления машины Тьюринга?
________________________________________________________________
История вычисления машины Тьюринга M - все конфигурации - записанные одна за другой. Если машина останавливается, это
конечная строка. Множество всех историй принимающих вычислений обозначается так: VALC(M).
Если M останавливается на w после n шагов, то история ее вычисления обозначается так:
C_M(w) = C_0#C_1#C_2#...#C_{n-1}#C_n$C_{n-1}^R#...#C_2^R#C_1^R#C_0^R. Тогда история вычислений машины Тьюринга M:
VALC(M) = {C_M(w) | w ∈ L(M)}
================================================================
Лемма об истории вычисления машины Тьюринга
________________________________________________________________
Для всякой машины Тьюринга M существуют и могут быть эффективно построены такие грамматики G_1 и G_2, что L(G_1) L (G_2) = VALC(M).
Кроме того, существуют грамматики G_1' и G_2', задающие дополнения этих языков: L(G_i') является дополнением к L(G_i) , для i ∈ {1, 2} - и потому есть и
грамматика, задающая язык дополнения VALC(M).
================================================================
Является ли проверка пустоты языка, распознаваемого машиной Тьюринга разрешимой задачей?
________________________________________________________________
Проверка пустоты языка, распознаваемого данной машиной Тьюринга M - это неразрешимая задача. Поскольку язык VALC(M) пуст тогда и
только тогда, когда пуст L(M), задача проверки VALC(M) на пустоту также неразрешима
================================================================
Неразрешимость некоторых задач на грамматики.
________________________________________________________________
Следующие задачи неразрешимы:
1. Пустота пересечения для двух данных грамматика;
2. Однозначность данной грамматики (т.е отсутствие строк с двумя и более различными деревьями разбора);
3. Определяет ли данная грамматика множество всех строк;
4. Равносильность двух данных грамматик (определяют ли они один и тот же язык);
5. Регулярность языка, порождаемого данной грамматикой.
================================================================