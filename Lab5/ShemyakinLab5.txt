Обманывающее множество - это?
________________________________________________________________
Обманывающее множество для языка L - это множество пар строк {(u_1, v_1),...,(u_m, v_m)} таких, 
что если все конкатенации u_iv_i лежат в L, а для всяких i, j ∈ {1,...,m}, 
где i ≠ j, то хотя бы одна из строк u_iv_j,u_jv_i не принадлежит L
================================================================
Теорема Шмидта-Лэуна - это?
________________________________________________________________
Пусть L - регулярный язык, и пусть {(u_1, v_1),...,(u_m, v_m)} множество пар строк. 
Пусть M - целочисленная матрица размера m × m, в которой M_i_j = 1, если u_iv_j ∈ L и 0 иначе. 
Тогда всякий UFA для языка L имеет не менее rank(M) состояний.
================================================================
Что такое производящая функция языка?
________________________________________________________________
Пусть L ⊆ Σ*  - язык. Для всякой длины строк n >= 0, пусть c_n^L - число строк длины n в L.
Тогда производящая функция языка L - это функция f_L: C -> C, задаваемая следующим степенным рядом.
f_L(z) = Σ_{n=0}^{∞} c_n^Lz^n.
Производящая функция языка зависит только от его коммутативного образа.
================================================================
Что такое булев конечный автомат?
________________________________________________________________
Булев конечный автомат (Boolean finite automaton, BFA): B = (Σ, Q, q_0, δ, F), функция переходов δ: Q × Σ -> B_f^(B_f^Q) - выдает булеву функцию
на множестве состояний.
1. Строка ε принимается из состояния q, если q ∈ F
2. Пусть aw - строка, q - состояние. Для всякого состояния r, пусть b_r - бит, означающий, принимается ли строка w из состояния r. Тогда aw принимается
из состояния q, если δ(q, a)(b_{q0},...,b_{q_{n-1}}) = 1
Каждый DFA можно рассматривать как BFA, в котором каждая функция δ(q, a) - это константа - одно состояние. В NFA - дизъюнкция. В AFA - конъюнкция или дизъюнкция.
Теорема: Всякий BFA с n состояниями можно преобразовать в DFA с 2^(2^n) состояниями.
================================================================
Двухсторонний детерминированный конечный автомат - это?
________________________________________________________________
Двухсторонний детерминированный конечный автомат (2DFA: two-way deterministic finite automaton) - это пятерка A = (Σ, Q, q_0, δ, F), состоящая из следующих компонентов:
1. Σ - алфавит, не содержащий двух особых символов ⊢,⊣ ∉ Σ (меток начала и конца строки)
2. Q - конечное множество состояний
3. q_0 ∈ Q - начальное состояние
4. Функция переходов δ: Q × Σ -> 2^Q
5. F ⊆ Q - множество принимающих состояний, применяемых на праввой метке конца (⊣)
Для входной строки w = a_1...a_l ∈ Σ*, пусть a_0 = ⊢ и a_{l+1} = ⊣. Вычисление 2DFA на w - это самая длинная, возможно бесконечная, последовательность (p_0, i_0),...(p_j, i_j),..., где:
1. p_j ∈ Q и 0 <= i_j <= l + 1 на каждом j-м шаге;
2. начальная конфигурация - (p_0, i_0) = (q_0, 0);
3. всякая следующая конфигурация (p_j, i_j), если она определена, удовлетворяет δ(p_{j-1}, a_{i_{j-1}}) = (p_j, d_j) и i_j = i_{j-1} + d_j.
Вычисление всегда определено однозначно. Строка w принимается, если вычисление конечно и его последняя конфигурация - (p_f, l + 1), для некоторого p_f ∈ F. Также вычисление может
заканчиваться неопределенным переходом (ведь δ - частичная функция) или же продолжатсья бесконечно; и в том и в другом случае A не принимает w.
Язык распознаваемый автоматом - L(A) = {w | A принимает w}.
================================================================
Двухсторонний недетерминированный конечный автомат - это?
________________________________________________________________
Двухсторонний недетерминированный конечный автомат (2NFA: two-way nondeterministic finite automaton) - это пятерка A = (Σ, Q, Q_0, δ, F), в которой Q_0 Q - начальное состояние,
а функция переходов имеет вид δ: Q × (Σ ∪ {⊢, ⊣}) -> 2^{Q × {-1, 1}}.
Для входной строки w = a_1...a_l ∈ Σ*, пусть a_0 = ⊢ и a_{l+1} = ⊣. Вычисление 2NFA на w - это всякая последовательность (p_0, i_0),...(p_j, i_j),..., где:
1. p_j ∈ Q и 0 <= i_j <= l + 1 на каждом j-м шаге;
2. начальная конфигурация - (p_0, i_0) верно p_0 ∈ Q_0
3. всякая следующая конфигурация (p_j, i_j), если она определена, удовлетворяет (p_j, d_j) ∈ δ(p_{j-1}, a_{i_{j-1}}) и i_j = i_{j-1} + d_j.
Строка w принимается, если хотя бы одно из вычислений на ней приводит в конфигурацию (p_f, l + 1), где p_f ∈ F.
Язык распознаваемый автоматом - L(A) = {w | A принимает w}.
================================================================
Что такое недетерминированный автомат Бюхи?
________________________________________________________________
Недетерминированный автомат Бюхи - это пятерка A = (Σ, Q, Q_0, δ, F) со следующим значением компонентов.
1. Σ - алфавит (конечное множество)
2. Q - конечное множество состояний
3. Q_0 ⊆ Q - множество начальных состояний
4. Функция переходов δ: Q × Σ -> 2^Q
5. Множество принимающих состояний F ⊆ Q
Автомат - детерминированный, если |Q_0| = 1 и |δ(q, a)| = 1, для всех q и a.
Для всякой входной бесконечной строки w = a_1...a_i... ∈ Σ^w, a_i ∈ Σ для всех i >= 1 вычисление - это всякая бесконечная последовательность
состояний α = p_0p_1...p_i... ∈ Q^w, в которой p_0 = q_0, и p_i ∈ δ(p_{i-1}, a_i), для всех i >= 1
Пусть inf(α) ⊆ Q - это множество всех состояний q, которые встречаются бесконечно много раз в вычислении. Тогда вычисление - принимающее, 
если inf(α) содержит хотя бы одно принимающее состояние, и автомат распознает множество всех бесконечных строк, на которых есть хотя бы одно принимающее вычисление.
L(A) = {w ∈ Σ^w | существует вычисление α ∈ Q^w, для которого inf(α) ∩ F ≠ ∅}
Пример: язык всех бесконечных строк над алфавитом Σ = {a, b}, которые содержат бесконечно много символов a, распознается детерминированным автоматом Бюхи A
с состояниями Q = {q_0, q_1}, где q_0 - начальное, и переходами
δ(q_0, a) = q_1,
δ(q_0, b) = q_0,
δ(q_1, a) = q_1,
δ(q_1, b) = q_0.
Принимающие F = {q_1}.
================================================================
Что такое недетерминированный автомат Мюллера?
________________________________________________________________
Недетерминированный автомат Мюллера - это пятерка A = (Σ, Q, Q_0, δ, F) со следующим значением компонентов.
1. Σ - алфавит (конечное множество)
2. Q - конечное множество состояний
3. Q_0 ⊆ Q - множество начальных состояний
4. Функция переходов δ: Q × Σ -> 2^Q
5. Множество принимающих состояний F ⊆ 2^Q
Автомат - детерминированный, если |Q_0| = 1 и |δ(q, a)| = 1, для всех q и a.
Вычисление α = p_0p_1...p_i... ∈ Q^w на бесконечной строке w = a_1...a_i... ∈ Σ^w и множество inf(α) ⊆ Q, встречающихся в нем бесконечно много раз,
определяются так же, как и автоматах Бюхи. Вычисление - принимающее, если inf(α) ∈ F.
L(A) = {w ∈ Σ^w | существует вычисление α ∈ Q^w, для которого inf(α) ∈ F}
Пример: язык всех бесконечных строк над алфавитом Σ = {a, b}, которые содержат конечное число символов a, распознается детерминированным автоматом Мюллера A
с состояниями Q = {q_0, q_1}, где q_0 - начальное, и переходами
δ(q_0, a) = q_0,
δ(q_0, b) = q_1,
δ(q_1, a) = q_0,
δ(q_1, b) = q_1.
Одно множество принимающих состояний F = {{q_1}}. Тогда, чтобы принять, автомат должен посещать q_0 конечное число раз, а q_1 - бесконечное число раз
================================================================
Теорема Хомского-Шютценберже о производящей функции для кс-грамматик
________________________________________________________________
Если L задается однозначной грамматикой, то ее производящая функция - алгебраическая.
Доказательство:
Возьмем грамматику в нормальном виде Грейбах, задающую тот же язык, записываем в качестве системы языковых уравнений. У неё единственное решение.
Всякая языковая переменная A ∈ N задается своим уравнением: A = ∪_{A -> aX_1...X_l ∈ R} {a}X_1...X_l
Эта переменная заменяется на функциональную переменную f_A(z), которая будет определяться соответствующим функциональным уравнением: объединения переходят 
в суммы, конкатенации в произведения, а каждый символ алфавита представлен функцией f(z) = z.
f_A(z) = Σ_{A -> aX_1...X_l ∈ R} zf_{X_1}(z)...f_{X_l}(z)
Пример: из языкового уравнения A = aBC ∪ bDc ∪ {aaa} получается функциональное уравнение f_A(z) = zf_B(z)f_C(z) + z^2f_D(z) + z^3.
Утверждение: если (L_1,...,L_n) - решение системы языковых уравнений, то (f_{L_1},...,f_{L_n}) -решение системы функциональных уравнений.
Полученная система функциональных уравнений это система полиномиальных уравнений над полем комплексных функций. Чтобы доказать алгебраичность функций f_{L_i}(z),
осталось свести эту систему к одному уравнению. Это проделывается через базисы Грёбнера.
Отсюда получается, что f_{L(G)}(z) - алгебраическая функция.
================================================================
Пример Флажоле с трансцендентными производящими функциями для кс-грамматик
________________________________________________________________
Рассматривается алфавит Σ = {a, b} и следующие языки: K = {a^nb^{2n} | n >= 1}*a*, L = a{b^na^{2n} | n >= 1}*b*.
Каждый задается однозначной грамматикой. Однако производящая функция их объединения , трансцендентна, и потому K ∪ L не задается никакой однозначной грамматикой.
Доказательство:
Языки K и L задаются однозначными грамматиками, и потому их производящие функции f_K и f_L - алгебраические. Производящая функция для объединения имеет вид 
f_{K ∪ L}(z) = f_K(z) + f_L(z) - f_{K ∩ L}(z). Достаточно доказать, что f_{K ∩ L}(z) трансцендентная. Пересечение K ∩ L равно K ∩ L = {ab, ab^2, ab^2a^4, ab^2a^4b^8,...},
и потому его производящая функция имеет вид f_{K ∩ L}(z) = Σ_{n=1}^{∞} z^{2^n - 1}
Ее значение в рациональной точке 1/k равно f_{K ∩ L}(1/k) = Σ_{n=1}^{∞} 1/(k^{2^n - 1}). Это трансцендентное число, поэтому число f_{K ∪ L}(1/k) также трансцендентно, и функция f_{K ∪ L} - не алгебраическая.
================================================================